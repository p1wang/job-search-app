// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  // url      = env("DATABASE_URL")
  url      = env("CLEARDB_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now()) @map("created_at")
  applications Application[] //applied jobs
  savedJobs    UserJob[] //saved jobs

  @@map("users")
}

model Company {
  id            Int      @id @default(autoincrement())
  name          String
  streetAddress String   @map("street_address")
  city          String
  province      String
  postalCode    String   @map("postal_code")
  country       String
  phone         String
  email         String   @unique
  password      String
  website       String
  createdAt     DateTime @default(now()) @map("created_at")
  jobs          Job[]

  @@map("companies")
}

model Job {
  id           Int           @id @default(autoincrement())
  title        String
  description  String        @db.Text
  createdAt    DateTime      @default(now()) @map("created_at")
  applications Application[] //applied jobs
  users        UserJob[] //saved jobs
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId    Int           @map("company_id")

  @@map("jobs")
}

model Application {
  id          Int          @id @default(autoincrement())
  skills      Skill[]
  experiences Experience[]
  educations  Education[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int          @map("user_id")
  job         Job          @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId       Int          @map("job_id")
  createdAt   DateTime     @default(now()) @map("created_at")

  @@unique([userId, jobId])
  @@map("applications")
}

model Industry {
  id    Int    @id @default(autoincrement())
  title String

  @@map("industries")
}

model Experience {
  id            Int         @id @default(autoincrement())
  title         String
  company       String
  description   String      @db.VarChar(2000)
  startDate     DateTime    @map("start_date")
  endDate       DateTime    @map("end_date")
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  applicationId Int         @map("application_id")

  @@map("experiences")
}

model Education {
  id            Int         @id @default(autoincrement())
  school        String
  degree        String
  startDate     DateTime    @map("start_date")
  endDate       DateTime    @map("end_date")
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  applicationId Int         @map("application_id")

  @@map("educations")
}

model Skill {
  id            Int         @id @default(autoincrement())
  title         String
  level         String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  applicationId Int

  @@map("skills")
}

// join table for many to many relationship between users and jobs
model UserJob {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @map("user_id")
  job    Job  @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId  Int  @map("job_id")

  @@unique([userId, jobId])
  @@map("users_jobs")
}
